-- CRIAÇÃO DAS TABELAS

-- TITULO
CREATE TABLE TITULO(
	COD_TIT SERIAL PRIMARY KEY,
	NOME VARCHAR(45) NOT NULL
);

-- LIVRO
CREATE TABLE LIVRO(
	COD_LIVRO SERIAL PRIMARY KEY,
	STATUS BOOLEAN DEFAULT TRUE,
	COD_TIT INTEGER REFERENCES TITULO(COD_TIT),
	VALOR_MULTA_DIA FLOAT
);

-- AUTOR
CREATE TABLE AUTOR(
	COD_AUTOR SERIAL PRIMARY KEY,
	NOME VARCHAR(45)
);

-- AUTORIA (RELAÇÃO ENTRE AUTOR E TÍTULO)
CREATE TABLE AUTORIA(
	COD_AUTORIA SERIAL PRIMARY KEY,
	COD_TIT INTEGER REFERENCES TITULO(COD_TIT),
	COD_AUTOR INTEGER REFERENCES AUTOR(COD_AUTOR)
);

-- LEITOR
CREATE TABLE LEITOR(
	COD_LEITOR SERIAL PRIMARY KEY,
	NOME VARCHAR(45) NOT NULL,
	DT_NASC DATE DEFAULT NULL
);

-- FUNCIONÁRIO
CREATE TABLE FUNCIONARIO(
	COD_FUNC SERIAL PRIMARY KEY,
	NOME VARCHAR(45) NOT NULL,
	DT_NASC DATE DEFAULT NULL
);

-- RESERVA
CREATE TABLE RESERVA(
	COD_RES SERIAL PRIMARY KEY,
	COD_TIT INTEGER REFERENCES TITULO(COD_TIT),
	DT_RES DATE DEFAULT CURRENT_DATE,
	COD_LEITOR INTEGER REFERENCES LEITOR(COD_LEITOR),
	COD_FUNC INTEGER REFERENCES FUNCIONARIO(COD_FUNC)
);

-- EMPRESTIMO
CREATE TABLE EMPRESTIMO(
	COD_EMP SERIAL PRIMARY KEY,
	DT_EMP DATE DEFAULT CURRENT_DATE,
	DT_PREV_DEV DATE DEFAULT NULL,
	DT_DEV DATE DEFAULT NULL,
	COD_LEITOR INTEGER REFERENCES LEITOR(COD_LEITOR),
	COD_FUNC INTEGER REFERENCES FUNCIONARIO(COD_FUNC),
	COD_LIVRO INTEGER REFERENCES LIVRO(COD_LIVRO)
);

-- Inserir Títulos
INSERT INTO TITULO (NOME) VALUES
('O Senhor dos Anéis'),
('Dom Casmurro'),
('1984'),
('O Pequeno Príncipe'),
('Clean Code');

-- Inserir Autores
INSERT INTO AUTOR (NOME) VALUES
('J.R.R. Tolkien'),
('Machado de Assis'),
('George Orwell'),
('Antoine de Saint-Exupéry'),
('Robert C. Martin');

-- Relacionar autores aos títulos
INSERT INTO AUTORIA (COD_TIT, COD_AUTOR) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);

-- Inserir Leitores
INSERT INTO LEITOR (NOME, DT_NASC) VALUES
('João', '2000-05-15'),
('Maria', '1995-03-10'),
('Carlos', '2010-08-20');

-- Inserir Funcionários
INSERT INTO FUNCIONARIO (NOME, DT_NASC) VALUES
('José', '1980-01-10'),
('Antônio', '1975-07-20');

-- Inserir Livros
INSERT INTO LIVRO (STATUS, COD_TIT, VALOR_MULTA_DIA) VALUES
(TRUE, 1, 2.5),
(TRUE, 2, 1.5),
(TRUE, 3, 2.0),
(TRUE, 4, 1.0),
(TRUE, 5, 3.0);

-- Inserir Reservas
INSERT INTO RESERVA (COD_TIT, DT_RES, COD_LEITOR, COD_FUNC) VALUES
(1, '2024-05-10', 2, 2), -- Maria reservou 'O Senhor dos Anéis' pelo Antônio
(2, '2024-05-11', 2, 2), -- Maria reservou 'Dom Casmurro' pelo Antônio
(5, '2024-05-15', 2, 2); -- Maria reservou 'Clean Code' pelo Antônio

-- Inserir Empréstimos
INSERT INTO EMPRESTIMO (DT_EMP, DT_PREV_DEV, DT_DEV, COD_LEITOR, COD_FUNC, COD_LIVRO) VALUES
('2024-05-01', '2024-05-05', '2024-05-06', 1, 1, 1), -- João pegou 'O Senhor dos Anéis' com José
('2024-05-03', '2024-05-07', '2024-05-08', 3, 1, 2); -- Carlos pegou 'Dom Casmurro' com José

-- 1.
SELECT T.NOME FROM TITULO T JOIN LIVRO L ON T.COD_TIT = L.COD_TIT JOIN EMPRESTIMO E ON E.COD_LIVRO = 
L.COD_LIVRO JOIN LEITOR LE ON LE.COD_LEITOR = E.COD_LEITOR JOIN FUNCIONARIO F ON F.COD_FUNC = E.COD_FUNC
WHERE LE.NOME ILIKE 'JOAO' AND F.NOME ILIKE 'JOSÉ'
UNION
SELECT T.NOME FROM TITULO T JOIN RESERVA R ON T.COD_TIT = R.COD_TIT JOIN FUNCIONARIO F ON F.COD_FUNC = 
R.COD_FUNC JOIN LEITOR L ON L.COD_LEITOR = R.COD_LEITOR WHERE L.NOME ILIKE 'MARIA' AND F.NOME ILIKE 'ANTÔNIO';

-- 2.
SELECT A.NOME FROM AUTOR A JOIN AUTORIA AU ON A.COD_AUTOR = AU.COD_AUTOR JOIN RESERVA R ON AU.COD_TIT = 
R.COD_TIT JOIN LEITOR L ON R.COD_LEITOR = L.COD_LEITOR AND L.NOME ILIKE 'MARIA'
EXCEPT
SELECT A.NOME FROM AUTOR A JOIN AUTORIA AU ON A.COD_AUTOR = AU.COD_AUTOR JOIN RESERVA R ON AU.COD_TIT = 
R.COD_TIT JOIN LEITOR L ON R.COD_LEITOR = L.COD_LEITOR WHERE L.DT_NASC IN (SELECT MAX(DT_NASC) FROM LEITOR); 

-- 3.
SELECT L.COD_LEITOR, L.NOME, SUM((DT_DEV - DT_EMP) * VALOR_MULTA_DIA) FROM LEITOR L JOIN 
EMPRESTIMO E ON L.COD_LEITOR = E.COD_LEITOR JOIN LIVRO LI ON E.COD_LIVRO = LI.COD_LIVRO GROUP BY L.COD_LEITOR, 
L.NOME HAVING SUM((DT_DEV - DT_EMP) * VALOR_MULTA_DIA) > 0;

-- 4.

INSERT INTO AUTOR (NOME) VALUES('SAMMYA');

SELECT A.NOME, COUNT(AU.COD_AUTOR) AS QTD_TITULOS FROM AUTOR A LEFT JOIN AUTORIA AU ON A.COD_AUTOR = AU.COD_AUTOR
GROUP BY A.NOME;

-- 5.
SELECT T.NOME FROM TITULO T LEFT JOIN LIVRO L ON T.COD_TIT = L.COD_TIT 
LEFT JOIN EMPRESTIMO E ON E.COD_LIVRO = L.COD_LIVRO
LEFT JOIN RESERVA R ON R.COD_TIT = T.COD_TIT
WHERE E.COD_LIVRO IS NULL AND R.COD_RES IS NULL
GROUP BY T.NOME;

-- 6.
SELECT NOME FROM LEITOR L JOIN RESERVA R ON L.COD_LEITOR = R.COD_LEITOR GROUP BY L.COD_LEITOR, L.NOME HAVING
COUNT(DISTINCT R.COD_TIT) = (SELECT COUNT(*) FROM TITULO);